! function(e) {
    "use strict";
    var t = !1;
    if ("undefined" != typeof module && module.exports) {
        t = !0;
        var s = require("request")
    }
    var n = !1,
        i = !1;
    try {
        var o = new XMLHttpRequest;
        "undefined" != typeof o.withCredentials ? n = !0 : "XDomainRequest" in window && (n = !0, i = !0)
    } catch (a) {}
    var h = Array.prototype.indexOf,
        l = function(e, t) {
            var s = 0,
                n = e.length;
            if (h && e.indexOf === h) return e.indexOf(t);
            for (; n > s; s++)
                if (e[s] === t) return s;
            return -1
        },
        r = function(e) {
            return this && this instanceof r ? ("string" == typeof e && (e = {
                key: e
            }), this.callback = e.callback, this.wanted = e.wanted || [], this.key = e.key, this.simpleSheet = !!e.simpleSheet, this.parseNumbers = !!e.parseNumbers, this.wait = !!e.wait, this.reverse = !!e.reverse, this.postProcess = e.postProcess, this.debug = !!e.debug, this.query = e.query || "", this.orderby = e.orderby, this.endpoint = e.endpoint || "https://spreadsheets.google.com", this.singleton = !!e.singleton, this.simple_url = !!e.simple_url, this.callbackContext = e.callbackContext, this.prettyColumnNames = "undefined" == typeof e.prettyColumnNames ? !e.proxy : e.prettyColumnNames, "undefined" != typeof e.proxy && (this.endpoint = e.proxy.replace(/\/$/, ""), this.simple_url = !0, this.singleton = !0, n = !1), this.parameterize = e.parameterize || !1, this.singleton && ("undefined" != typeof r.singleton && this.log("WARNING! Tabletop singleton already defined"), r.singleton = this), /key=/.test(this.key) && (this.log("You passed an old Google Docs url as the key! Attempting to parse."), this.key = this.key.match("key=(.*?)(&|#|$)")[1]), /pubhtml/.test(this.key) && (this.log("You passed a new Google Spreadsheets url as the key! Attempting to parse."), this.key = this.key.match("d\\/(.*?)\\/pubhtml")[1]), this.key ? (this.log("Initializing with key " + this.key), this.models = {}, this.model_names = [], this.base_json_path = "/feeds/worksheets/" + this.key + "/public/basic?alt=", this.base_json_path += t || n ? "json" : "json-in-script", void(this.wait || this.fetch())) : void this.log("You need to pass Tabletop a key!")) : new r(e)
        };
    r.callbacks = {}, r.init = function(e) {
        return new r(e)
    }, r.sheets = function() {
        this.log("Times have changed! You'll want to use var tabletop = Tabletop.init(...); tabletop.sheets(...); instead of Tabletop.sheets(...)")
    }, r.prototype = {
        fetch: function(e) {
            "undefined" != typeof e && (this.callback = e), this.requestData(this.base_json_path, this.loadSheets)
        },
        requestData: function(e, s) {
            if (t) this.serverSideFetch(e, s);
            else {
                var o = this.endpoint.split("//").shift() || "http";
                !n || i && o !== location.protocol ? this.injectScript(e, s) : this.xhrFetch(e, s)
            }
        },
        xhrFetch: function(e, t) {
            var s = i ? new XDomainRequest : new XMLHttpRequest;
            s.open("GET", this.endpoint + e);
            var n = this;
            s.onload = function() {
                try {
                    var e = JSON.parse(s.responseText)
                } catch (i) {
                    console.error(i)
                }
                t.call(n, e)
            }, s.send()
        },
        injectScript: function(e, t) {
            var s, n = document.createElement("script");
            if (this.singleton) t === this.loadSheets ? s = "Tabletop.singleton.loadSheets" : t === this.loadSheet && (s = "Tabletop.singleton.loadSheet");
            else {
                var i = this;
                s = "tt" + +new Date + Math.floor(1e5 * Math.random()), r.callbacks[s] = function() {
                    var e = Array.prototype.slice.call(arguments, 0);
                    t.apply(i, e), n.parentNode.removeChild(n), delete r.callbacks[s]
                }, s = "Tabletop.callbacks." + s
            }
            var o = e + "&callback=" + s;
            n.src = this.simple_url ? -1 !== e.indexOf("/list/") ? this.endpoint + "/" + this.key + "-" + e.split("/")[4] : this.endpoint + "/" + this.key : this.endpoint + o, this.parameterize && (n.src = this.parameterize + encodeURIComponent(n.src)), document.getElementsByTagName("script")[0].parentNode.appendChild(n)
        },
        serverSideFetch: function(e, t) {
            var n = this;
            s({
                url: this.endpoint + e,
                json: !0
            }, function(e, s, i) {
                return e ? console.error(e) : void t.call(n, i)
            })
        },
        isWanted: function(e) {
            return 0 === this.wanted.length ? !0 : -1 !== l(this.wanted, e)
        },
        data: function() {
            return 0 === this.model_names.length ? void 0 : this.simpleSheet ? (this.model_names.length > 1 && this.debug && this.log("WARNING You have more than one sheet but are using simple sheet mode! Don't blame me when something goes wrong."), this.models[this.model_names[0]].all()) : this.models
        },
        addWanted: function(e) {
            -1 === l(this.wanted, e) && this.wanted.push(e)
        },
        loadSheets: function(e) {
            var s, i, o = [];
            for (this.foundSheetNames = [], s = 0, i = e.feed.entry.length; i > s; s++)
                if (this.foundSheetNames.push(e.feed.entry[s].title.$t), this.isWanted(e.feed.entry[s].content.$t)) {
                    var a = e.feed.entry[s].link.length - 1,
                        h = e.feed.entry[s].link[a].href.split("/").pop(),
                        l = "/feeds/list/" + this.key + "/" + h + "/public/values?alt=";
                    l += t || n ? "json" : "json-in-script", this.query && (l += "&sq=" + this.query), this.orderby && (l += "&orderby=column:" + this.orderby.toLowerCase()), this.reverse && (l += "&reverse=true"), o.push(l)
                }
            for (this.sheetsToLoad = o.length, s = 0, i = o.length; i > s; s++) this.requestData(o[s], this.loadSheet)
        },
        sheets: function(e) {
            return "undefined" == typeof e ? this.models : "undefined" == typeof this.models[e] ? void 0 : this.models[e]
        },
        sheetReady: function(e) {
            this.models[e.name] = e, -1 === l(this.model_names, e.name) && this.model_names.push(e.name), this.sheetsToLoad--, 0 === this.sheetsToLoad && this.doCallback()
        },
        loadSheet: function(e) {
            {
                var t = this;
                new r.Model({
                    data: e,
                    parseNumbers: this.parseNumbers,
                    postProcess: this.postProcess,
                    tabletop: this,
                    prettyColumnNames: this.prettyColumnNames,
                    onReady: function() {
                        t.sheetReady(this)
                    }
                })
            }
        },
        doCallback: function() {
            0 === this.sheetsToLoad && this.callback.apply(this.callbackContext || this, [this.data(), this])
        },
        log: function() {
            this.debug && "undefined" != typeof console && "undefined" != typeof console.log && Function.prototype.apply.apply(console.log, [console, arguments])
        }
    }, r.Model = function(e) {
        var t, s, n, i;
        if (this.column_names = [], this.name = e.data.feed.title.$t, this.tabletop = e.tabletop, this.elements = [], this.onReady = e.onReady, this.raw = e.data, "undefined" == typeof e.data.feed.entry) return e.tabletop.log("Missing data for " + this.name + ", make sure you didn't forget column headers"), this.original_columns = [], this.elements = [], void this.onReady.call(this);
        for (var o in e.data.feed.entry[0]) /^gsx/.test(o) && this.column_names.push(o.replace("gsx$", ""));
        for (this.original_columns = this.column_names, t = 0, n = e.data.feed.entry.length; n > t; t++) {
            var a = e.data.feed.entry[t],
                h = {};
            for (s = 0, i = this.column_names.length; i > s; s++) {
                var l = a["gsx$" + this.column_names[s]];
                h[this.column_names[s]] = "undefined" != typeof l ? e.parseNumbers && "" !== l.$t && !isNaN(l.$t) ? +l.$t : l.$t : ""
            }
            void 0 === h.rowNumber && (h.rowNumber = t + 1), e.postProcess && e.postProcess(h), this.elements.push(h)
        }
        e.prettyColumnNames ? this.fetchPrettyColumns() : this.onReady.call(this)
    }, r.Model.prototype = {
        all: function() {
            return this.elements
        },
        fetchPrettyColumns: function() {
            if (!this.raw.feed.link[3]) return this.ready();
            var e = this.raw.feed.link[3].href.replace("/feeds/list/", "/feeds/cells/").replace("https://spreadsheets.google.com", ""),
                t = this;
            this.tabletop.requestData(e, function(e) {
                t.loadPrettyColumns(e)
            })
        },
        ready: function() {
            this.onReady.call(this)
        },
        loadPrettyColumns: function(e) {
            for (var t = {}, s = this.column_names, n = 0, i = s.length; i > n; n++) t[s[n]] = "undefined" != typeof e.feed.entry[n].content.$t ? e.feed.entry[n].content.$t : s[n];
            this.pretty_columns = t, this.prettifyElements(), this.ready()
        },
        prettifyElements: function() {
            var e, t, s, n, i = [],
                o = [];
            for (t = 0, n = this.column_names.length; n > t; t++) o.push(this.pretty_columns[this.column_names[t]]);
            for (e = 0, s = this.elements.length; s > e; e++) {
                var a = {};
                for (t = 0, n = this.column_names.length; n > t; t++) {
                    var h = this.pretty_columns[this.column_names[t]];
                    a[h] = this.elements[e][this.column_names[t]]
                }
                i.push(a)
            }
            this.elements = i, this.column_names = o
        },
        toArray: function() {
            var e, t, s, n, i = [];
            for (e = 0, s = this.elements.length; s > e; e++) {
                var o = [];
                for (t = 0, n = this.column_names.length; n > t; t++) o.push(this.elements[e][this.column_names[t]]);
                i.push(o)
            }
            return i
        }
    }, t ? module.exports = r : "function" == typeof define && define.amd ? define(function() {
        return r
    }) : e.Tabletop = r
}(this);
